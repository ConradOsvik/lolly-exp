generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model SummonerData {
//   id                 Int      @id @default(autoincrement())
//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt
//   platform           String
//   summonerName       String
//   summonerLevel      Int
//   profileIconId      Int
//   summonerId         String
//   accountId          String
//   puuid              String
//   flexLeagueId       String?
//   flexTier           String?
//   flexRank           String?
//   flexLp             Int?
//   flexWins           Int?
//   flexLosses         Int?
//   flexVeteran        Boolean?
//   flexInactive       Boolean?
//   flexFreshBlood     Boolean?
//   flexHotStreak      Boolean?
//   flexPromosTarget   Int?
//   flexPromosWins     Int?
//   flexPromosLosses   Int?
//   flexPromosProgress String?
//   soloLeagueId       String?
//   soloTier           String?
//   soloRank           String?
//   soloLp             Int?
//   soloWins           Int?
//   soloLosses         Int?
//   soloVeteran        Boolean?
//   soloInactive       Boolean?
//   soloFreshBlood     Boolean?
//   soloHotStreak      Boolean?
//   soloPromosTarget   Int?
//   soloPromosWins     Int?
//   soloPromosLosses   Int?
//   soloPromosProgress String?

//   @@unique([summonerName, platform])
//   @@index([summonerName, platform])
// }

// model MatchData {
//   id                    Int                    @id @default(autoincrement())
//   matchId               String                 @unique
//   createdAt             DateTime               @default(now())
//   gameCreation          DateTime
//   gameDuration          Int
//   gameEndTimestamp      DateTime
//   gameId                String
//   gameMode              String
//   gameStartTimestamp    DateTime
//   gameType              String
//   gameVersion           String
//   mapId                 Int
//   platform              String
//   platformId            String
//   queueId               Int
//   // teams                Json
//   matchParticipantsData MatchParticipantData[]

//   @@index([matchId(sort: Desc)])
// }

// model MatchParticipantData {
//   id                             Int     @id @default(autoincrement())
//   matchId                        String
//   assists                        Int
//   baronKills                     Int
//   champExperience                Int
//   champLevel                     Int
//   championId                     Int
//   championName                   String
//   controlWardsPlaced             Int
//   damageDealtToBuildings         Int
//   damageDealtToObjectives        Int
//   damageDealtToTurrets           Int
//   damageSelfMitigated            Int
//   deaths                         Int
//   doubleKills                    Int
//   dragonKills                    Int
//   firstBloodAssist               Boolean
//   firstBloodKill                 Boolean
//   firstTowerAssist               Boolean
//   firstTowerKill                 Boolean
//   gameEndedInEarlySurrender      Boolean
//   gameEndedInSurrender           Boolean
//   goldEarned                     Int
//   goldSpent                      Int
//   induvidualPosition             String
//   inhibitorKills                 Int
//   inhibitorTakedowns             Int
//   inhibitorsLost                 Int
//   item0                          Int
//   item1                          Int
//   item2                          Int
//   item3                          Int
//   item4                          Int
//   item5                          Int
//   item6                          Int
//   itemsPurchased                 Int
//   killingSprees                  Int
//   kills                          Int
//   lane                           String
//   largestCriticalStrike          Int
//   largestKillingSpree            Int
//   largestMultiKill               Int
//   longestTimeSpentLiving         Int
//   magicDamageDealt               Int
//   magicDamageDealtToChampions    Int
//   magicDamageTaken               Int
//   neutralMinionsKilled           Int
//   nexusKills                     Int
//   nexusLost                      Int
//   nexusTakedowns                 Int
//   objectivesStolen               Int
//   objectivesStolenAssists        Int
//   participantId                  Int
//   pentaKills                     Int
//   perkDefense                    Int
//   perkFlex                       Int
//   perkOffense                    Int
//   perkPrimaryStyle               Int
//   perkPrimary1                   Int
//   perkPrimary2                   Int
//   perkPrimary3                   Int
//   perkPrimary4                   Int
//   perkSecondaryStyle             Int
//   perkSecondary1                 Int
//   perkSecondary2                 Int
//   physicalDamageDealt            Int
//   physicalDamageDealtToChampions Int
//   physicalDamageTaken            Int
//   puuid                          String
//   quadraKills                    Int
//   role                           String
//   sightWardsBoughtInGame         Int
//   spell1Casts                    Int
//   spell2Casts                    Int
//   spell3Casts                    Int
//   spell4Casts                    Int
//   summoner1Casts                 Int
//   summoner1Id                    Int
//   summoner2Casts                 Int
//   summoner2Id                    Int
//   summonerName                   String
//   teamEarlySurrendered           Boolean
//   teamId                         Int
//   teamPosition                   String
//   timeCCingOthers                Int
//   timePlayed                     Int
//   totalDamageDealt               Int
//   totalDamageDealtToChampions    Int
//   totalDamageTaken               Int
//   totalHeal                      Int
//   totalHealsOnTeammates          Int
//   totalMinionsKilled             Int
//   totalTimeCCDealt               Int
//   totalTimeSpentDead             Int
//   totalUnitsHealed               Int
//   tripleKills                    Int
//   trueDamageDealt                Int
//   trueDamageDealtToChampions     Int
//   trueDamageTaken                Int
//   turretKills                    Int
//   turretTakedowns                Int
//   turretsLost                    Int
//   unrealKills                    Int
//   visionScore                    Int
//   visionWardsBoughtInGame        Int
//   wardsKilled                    Int
//   wardsPlaced                    Int
//   win                            Boolean

//   matchData MatchData @relation(fields: [matchId], references: [matchId], onDelete: Cascade)

//   @@index([matchId(sort: Desc)])
// }

model SummonerProfile {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  platform           String
  summonerName       String
  summonerLevel      Int
  profileIconId      Int
  summonerId         String
  accountId          String
  puuid              String

  @@unique([summonerName, platform])
  @@index([summonerName, platform])
}

model SummonerRankedStats {
  id             Int @id @default(autoincrement())
  summoenrName   String
  platform       String
  leagueId       String
  tier           String
  rank           String
  lp             Int
  wins           Int
  losses         Int
  veteran        Boolean
  inactive       Boolean
  freshBlood     Boolean
  hotStreak      Boolean
  promosTarget   Int?
  promosWins     Int?
  promosLosses   Int?
  promosProgress String?
}

model MatchData {
  matchId               String                 @unique
  createdAt             DateTime               @default(now())
  gameCreation          DateTime
  gameDuration          Int
  gameEndTimestamp      DateTime
  gameId                String
  gameMode              String
  gameStartTimestamp    DateTime
  gameType              String
  gameVersion           String
  mapId                 Int
  platform              String
  platformId            String
  queueId               Int
  // teams                Json
  matchParticipantsData MatchParticipantData[]

  @@index([matchId(sort: Desc)])
}

model MatchParticipantData {
  
}